// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace AdminClient
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CraftsController.
    /// </summary>
    public static partial class CraftsControllerExtensions
    {
            /// <summary>
            /// CraftsController_create
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            public static void Create(this ICraftsController operations, CreateCraftDto body, string contentType = default(string))
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).CreateAsync(body, contentType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_create
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this ICraftsController operations, CreateCraftDto body, string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateWithHttpMessagesAsync(body, contentType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// CraftsController_findAll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void FindAll(this ICraftsController operations)
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).FindAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_findAll
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FindAllAsync(this ICraftsController operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.FindAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// CraftsController_findOne
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void FindOne(this ICraftsController operations, string id)
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).FindOneAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_findOne
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FindOneAsync(this ICraftsController operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.FindOneWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// CraftsController_update
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            public static void Update(this ICraftsController operations, string id, UpdateCraftDto body, string contentType = default(string))
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).UpdateAsync(id, body, contentType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_update
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this ICraftsController operations, string id, UpdateCraftDto body, string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateWithHttpMessagesAsync(id, body, contentType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// CraftsController_remove
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Remove(this ICraftsController operations, double id)
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).RemoveAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_remove
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this ICraftsController operations, double id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// CraftsController_addphoto
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            public static void Addphoto(this ICraftsController operations, AddPhotoCraftDto body, string contentType = default(string))
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).AddphotoAsync(body, contentType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_addphoto
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddphotoAsync(this ICraftsController operations, AddPhotoCraftDto body, string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddphotoWithHttpMessagesAsync(body, contentType, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// CraftsController_removephoto
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            public static void Removephoto(this ICraftsController operations, AddPhotoCraftDto body, string contentType = default(string))
            {
                Task.Factory.StartNew(s => ((ICraftsController)s).RemovephotoAsync(body, contentType), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// CraftsController_removephoto
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='contentType'>
            /// . Possible values include: 'application/json'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemovephotoAsync(this ICraftsController operations, AddPhotoCraftDto body, string contentType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemovephotoWithHttpMessagesAsync(body, contentType, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
